apply plugin: 'jacoco'

jacoco {
    toolVersion = "0.8.7"
    reportsDir = file("$project.rootDir/build/covReportDir")
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
    // see related issue https://github.com/gradle/gradle/issues/5184#issuecomment-457865951
}

private static boolean isAndroidModule(Project project) {
    boolean isAndroidLibrary = project.plugins.hasPlugin('com.android.library')
    boolean isAndroidApp = project.plugins.hasPlugin('com.android.application')
    return isAndroidLibrary || isAndroidApp
}

afterEvaluate { project ->
    if (isAndroidModule(project)) setupAndroidReporting()
    else setupKotlinReporting()
}

def setupKotlinReporting() {
    jacocoTestReport {
        dependsOn test
        reports {
            csv.enabled true // change if needed
            xml.enabled false // change if needed
            html {
                enabled true
                destination file("${buildDir}/coverage-report")
            }
        }
        afterEvaluate {
            classDirectories.from = files(classDirectories.files.collect {
                fileTree(dir: it, exclude: [
                        // dagger
                        '**/*_MembersInjector.class',
                        '**/Dagger*Component.class',
                        '**/Dagger*Component$Builder.class',
                        '**/Dagger*Subcomponent*.class',
                        '**/*Subcomponent$Builder.class',
                        '**/*Module_*Factory.class',
                        '**/di/module/*',
                        '**/*_Factory*.*',
                        '**/*Module*.*',
                        '**/*Dagger*.*',
                        '**/*Hilt*.*',
                ])
            })
        }
    }
}

def setupAndroidReporting() {
    (android.hasProperty('applicationVariants')
            ? android.'applicationVariants'
            : android.'libraryVariants')
            .all { variant ->
                def variantName = variant.name
                def unitTestTask = "test${variantName.capitalize()}UnitTest"
                def androidTestCoverageTask = "create${variantName.capitalize()}CoverageReport"

                tasks.create(name: "${unitTestTask}Coverage", type: JacocoReport, dependsOn: [
                        "$unitTestTask",
                        //"$androidTestCoverageTask" ,
                        //":second:testDebugUnitTest"
                ]) {
                    group = "Reporting"
                    description = "Generate Jacoco coverage reports for the ${variantName.capitalize()} build"
                    reports {
                        csv.enabled true // change if needed
                        xml.enabled false // change if needed
                        html {
                            enabled true
                            destination file("${buildDir}/coverage-report")
                        }
                    }
                    def fileFilter = [
                            // data binding
                            'android/databinding/**/*.class',
                            '**/android/databinding/*Binding.class',
                            '**/android/databinding/*',
                            '**/androidx/databinding/*',
                            '**/BR.*',
                            // android
                            '**/R.class',
                            '**/R$*.class',
                            '**/BuildConfig.*',
                            '**/Manifest*.*',
                            '**/*Test*.*',
                            'android/**/*.*',
                            // dagger
                            '**/*_MembersInjector.class',
                            '**/Dagger*Component.class',
                            '**/Dagger*Component$Builder.class',
                            '**/Dagger*Subcomponent*.class',
                            '**/*Subcomponent$Builder.class',
                            '**/*Module_*Factory.class',
                            '**/di/module/*',
                            '**/*_Factory*.*',
                            '**/*Module*.*',
                            '**/*Dagger*.*',
                            '**/*Hilt*.*',
                            // kotlin
                            '**/*MapperImpl*.*',
                            '**/*$ViewInjector*.*',
                            '**/*$ViewBinder*.*',
                            '**/BuildConfig.*',
                            '**/*Component*.*',
                            '**/*BR*.*',
                            '**/Manifest*.*',
                            '**/*$Lambda$*.*',
                            '**/*Companion*.*',
                            '**/*Module*.*',
                            '**/*Dagger*.*',
                            '**/*Hilt*.*',
                            '**/*MembersInjector*.*',
                            '**/*_MembersInjector.class',
                            '**/*_Factory*.*',
                            '**/*_Provide*Factory*.*',
                            '**/*Extensions*.*',
                            // sealed and data classes
                            '**/*$Result.*',
                            '**/*$Result$*.*',
                            // adapters generated by moshi
                            '**/*JsonAdapter.*',
                    ]

                    def javaTree = fileTree(dir: "${project.buildDir}/intermediates/javac/${variantName}/classes", excludes: fileFilter)
                    def kotlinTree = fileTree(dir: "${project.buildDir}/tmp/kotlin-classes/${variantName}", excludes: fileFilter)
                    classDirectories.from = files([javaTree], [kotlinTree])

                    def coverageSourceDirs = ["src/main/java",
                                              "src/${variantName}/java"]
                    sourceDirectories.setFrom(files(coverageSourceDirs))
                    additionalSourceDirs.setFrom(files(coverageSourceDirs))

                    executionData.from = files("${project.buildDir}/jacoco/${unitTestTask}.exec")
                    //executionData(fileTree(dir: "$project.rootDir",includes: ["**/*.ec", "**/${unitTestTask}.exec"]))
                }

            }
}


